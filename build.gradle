plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.3.30'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.30'
}

apply plugin: 'jacoco'
apply plugin: 'io.spring.dependency-management'

group = 'net.jp.vss'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
}

configurations {
	ktlint
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.google.guava:guava:27.1-jre'
    implementation "org.postgresql:postgresql:$POSTGRES_VERSION"

	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	testImplementation 'com.h2database:h2'

	implementation "org.flywaydb:flyway-core:$FLYWAY_VERSION"
	testImplementation 'org.flywaydb.flyway-test-extensions:flyway-dbunit-test:5.2.1'

	implementation "com.pinterest.ktlint:ktlint-core:$KTLINT_CORE_VERSION"
	ktlint "com.github.shyiko:ktlint:$KTLINT_VERSION"

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    testImplementation "com.jayway.jsonpath:json-path-assert:2.4.0"
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

task formatAndKtlint(type: JavaExec, group: "kotlin Formatting") {
	description = 'Fix Kotlin code style deviations.'
	main = 'com.github.shyiko.ktlint.Main'
	// adding compiled classes to the classpath so that ktlint would validate project's sources
	// using its own ruleset (in other words to dogfood)
	classpath = configurations.ktlint + sourceSets.main.output
	args '--debug', '--format', 'src/**/*.kt'
}

task ktlint(type: JavaExec, group: "kotlin verification") {
	description = 'Check Kotlin code style.'
	main = 'com.github.shyiko.ktlint.Main'
	// adding compiled classes to the classpath so that ktlint would validate project's sources
	// using its own ruleset (in other words to dogfood)
	classpath = configurations.ktlint + sourceSets.main.output
	args 'src/**/*.kt'
}

bootRun {
    if ( project.hasProperty('personal') ) {
        bootRun.systemProperties["spring.profiles.active"] = "personal"
    }
}

// front 側の build
task npmRunBuild() {
    doLast {
        def p = "npm run build".execute()
        p.waitForProcessOutput(System.out, System.err)
    }
}

// CI の report 用
jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
    }
}
