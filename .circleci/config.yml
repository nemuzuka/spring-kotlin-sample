version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}-{{ checksum "gradle.properties" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Update dependencies
          command: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}-{{ checksum "gradle.properties" }}

      - run:
          name: Install nodeJS
          command: |
            sudo apt-get install -y node
            ./gradlew npmInstall

      - run:
          name: Run ktlint
          command: ./gradlew ktlint
      - run:
          name: Run tests
          command: ./gradlew test jacocoTestReport
      - store_artifacts:
          path: build/reports
      - store_test_results:
          path: build/test-results
          destination: test-results

      - run:
          name: Setup NodeJS and node_modules
          command: |
            # Install NVM
            sudo apt-get install -y node
            ./gradlew npmInstall

      - run:
          name: npm run lint
          command: ./gradlew lintFront

      - run:
          name: npm run test
          command: ./gradlew testFront

      - run:
          name: Push application Docker image
          command: |
            if [[ ${CIRCLE_BRANCH} =~ feature ]]; then
              echo "No push branch: ${CIRCLE_BRANCH}"
              exit 0
            else
              echo "export IMAGE_TAG=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
              source $BASH_ENV
            fi
            sudo apt-get install -y python3-pip; sudo pip3 install awscli
            echo "export IMAGE_NAME=${REPOSITORY_NAME}:${IMAGE_TAG}" >> $BASH_ENV
            source $BASH_ENV

            echo "IMAGE_TAG: ${IMAGE_TAG} / IMAGE_NAME: ${IMAGE_NAME}"
            ./gradlew build
            docker build -t ${IMAGE_NAME} .
            $(aws ecr get-login --no-include-email)
            docker tag ${IMAGE_NAME} ${ECR_ENDPOINT}/${IMAGE_NAME}
            docker push ${ECR_ENDPOINT}/${IMAGE_NAME}
            if [ -n "${CIRCLE_TAG}" ]; then
              echo "add tag: ${CIRCLE_TAG}"
              docker tag ${IMAGE_NAME} ${ECR_ENDPOINT}/${REPOSITORY_NAME}:${CIRCLE_TAG}
              docker push ${ECR_ENDPOINT}/${REPOSITORY_NAME}:${CIRCLE_TAG}
            fi
workflows:
  version: 2
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - develop
                - /^feature.*/
  tag_pushed:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
